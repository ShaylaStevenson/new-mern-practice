{"version":3,"sources":["img/profilePicture.jpg","registerServiceWorker.js","components/LoginModal/index.js","components/Navigation/index.js","components/Footer/index.js","pages/Home/index.js","pages/TestPage/index.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Modal","setAppElement","LoginModal","_ref","isOpen","closeModal","react_default","a","createElement","lib_default","onClick","Navigation","_useState","useState","_useState2","Object","slicedToArray","modalIsOpen","setIsOpen","useEffect","Navbar","expand","bg","variant","className","NavbarBrand","react_router_dom","to","replace","Nav","NavItem","components_LoginModal","Footer","Container","Home","src","profilePicture","alt","TestPage","App","components_Navigation","react_router","exact","path","pages_Home","pages_TestPage","Card","components_Footer","ReactDOM","render","basename","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.649a5f9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilePicture.ab2c3997.jpg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport Modal from 'react-modal';\r\n\r\n// required to meet accesibility standards\r\nModal.setAppElement('#root');\r\n\r\nconst LoginModal = ({ isOpen, closeModal }) => {\r\n  //console.log(props.isOpen)\r\n\r\n  return (\r\n      <div>\r\n        <Modal\r\n          isOpen={isOpen}\r\n        >\r\n          <h2>Login</h2>\r\n          <form>\r\n            <h4>Username</h4>\r\n            <input/>\r\n            <h4>Password</h4>\r\n            <input/>\r\n          </form>\r\n          <button onClick={closeModal}>close</button>\r\n        </Modal>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default LoginModal;","import React, { useState, useEffect } from \"react\";\r\nimport LoginModal from \"../LoginModal\";\r\nimport {Link} from \"react-router-dom\"\r\nimport \"./style.css\"\r\nimport { Navbar, Nav, NavbarBrand, NavItem } from 'react-bootstrap';\r\n\r\nconst Navigation = () => {\r\n    // state, state-setter, and initial state\r\n    const [modalIsOpen, setIsOpen] = useState(false)\r\n\r\n    // currently only used for console.log\r\n    useEffect(\r\n        () => {\r\n          console.log(\"LoginModalIsOpen: \" + modalIsOpen)\r\n        }\r\n    );\r\n\r\n    // change state of modalIsOpen to false\r\n    function closeModal() {\r\n        setIsOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\" className=\"justify-content-between\">\r\n                <NavbarBrand><Link to=\"/\" className=\"nav-link\" replace>New Mern Practice</Link></NavbarBrand>\r\n                {/* use <Link> vs <a> when using HashRouter */}\r\n                <Nav>\r\n                    <NavItem><Link to=\"/\" className=\"nav-link\" replace>Home</Link></NavItem>\r\n                    <NavItem><Link to=\"/test-page\" className=\"nav-link\" replace>Test Page</Link></NavItem>\r\n                    {/* set state to true to open the loginModal */}\r\n                    <NavItem><Link to=\"#\" className=\"nav-link\" onClick={() => setIsOpen(true)}>Login</Link></NavItem>\r\n                </Nav>  \r\n            </Navbar>\r\n            {/* pass through the state of the modal to LoginModal */}\r\n            {/* pass through the closeModal function in order use close button within LoginModal */}\r\n            <LoginModal\r\n                isOpen={modalIsOpen}\r\n                closeModal={closeModal}\r\n            />  \r\n        </div>           \r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport FooterNav from \"react-bootstrap/Navbar\";\r\nimport { Container, NavbarBrand } from \"react-bootstrap\"\r\n\r\nfunction Footer() {\r\n    return(\r\n        <div className=\"fixed-bottom\">\r\n           <FooterNav>\r\n                <Container>\r\n                    <NavbarBrand>Footer</NavbarBrand>\r\n                </Container>\r\n            </FooterNav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport profilePicture from \"../../img/profilePicture.jpg\";\r\n\r\nconst Home = () => {\r\n    return(\r\n        <div>\r\n            <h1>New Mern Practice</h1>\r\n            <h2>Author: Shayla Stevenson</h2>\r\n            <img src={profilePicture} alt=\"Shayla Stevenson\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nconst TestPage = () => {\r\n    return(\r\n        <div>\r\n            <h1>This is the test page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestPage","import React from \"react\";\nimport {  Route, Switch } from \"react-router-dom\";\n//used HashRouter in order to deploy to gh pages; set up in index.js\n//BrowserRouter as Router,\nimport Navigation from \"./components/Navigation\";\nimport Footer from \"./components/Footer\"\nimport Home from \"./pages/Home\"\nimport \"./App.css\";\nimport TestPage from \"./pages/TestPage\";\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport Card from \"react-bootstrap/Card\"\n\nconst App = () => {\n    return (\n      <div className=\"App\">\n        {/* <Router> */}\n          <div>\n            <Navigation />\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n              <Route exact path=\"/test-page\">\n                <TestPage />\n              </Route>\n            </Switch>\n           \n            <Card><h4>I am a card, YEAH!</h4></Card>\n            <Footer />\n          </div>\n        {/* </Router> */}\n      </div>\n    );\n}\n\nexport default App","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { HashRouter } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./index.css\";\nimport App from \"./App\";\n\n\n// use HashRouter when deploying to gh-pages\nReactDOM.render(\n    // todo: look up:\n    // <React.StrictMode>\n      // name of the github repo\n      <HashRouter basename=\"/new-mern-practice\">\n        <App />\n      </HashRouter>,\n    // </React.StrictMode>,\n    document.getElementById('root')\n  );\n  registerServiceWorker();"],"sourceRoot":""}