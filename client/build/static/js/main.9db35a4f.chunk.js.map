{"version":3,"sources":["img/profilePicture.jpg","components/LoginModal/index.js","components/Navigation/index.js","pages/Home/index.js","pages/TestPage/index.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Modal","setAppElement","LoginModal","_ref","isOpen","closeModal","react_default","a","createElement","lib_default","onClick","Navigation","_useState","useState","_useState2","Object","slicedToArray","modalIsOpen","setIsOpen","useEffect","console","log","react_router_dom","to","components_LoginModal","Home","src","profilePicture","alt","TestPage","App","className","components_Navigation","react_router","exact","path","pages_Home","pages_TestPage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","basename","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9db35a4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilePicture.ab2c3997.jpg\";","import React from \"react\";\r\nimport Modal from 'react-modal';\r\n\r\n// required to meet accesibility standards\r\nModal.setAppElement('#root');\r\n\r\nconst LoginModal = ({ isOpen, closeModal }) => {\r\n  //console.log(props.isOpen)\r\n\r\n  return (\r\n      <div>\r\n        <Modal\r\n          isOpen={isOpen}\r\n        >\r\n          <h2>Login</h2>\r\n          <form>\r\n            <h4>Username</h4>\r\n            <input/>\r\n            <h4>Password</h4>\r\n            <input/>\r\n          </form>\r\n          <button onClick={closeModal}>close</button>\r\n        </Modal>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default LoginModal;","import React, { useState, useEffect } from \"react\";\r\nimport LoginModal from \"../LoginModal\";\r\nimport {Link} from \"react-router-dom\"\r\nimport \"./style.css\"\r\n//import TestPage from \"../../pages/TestPage\";\r\n\r\n\r\nconst Navigation = () => {\r\n    // state, state-setter, and initial state\r\n    const [modalIsOpen, setIsOpen] = useState(false)\r\n\r\n    // currently only used for console.log\r\n    useEffect(\r\n        () => {\r\n          console.log(\"modalIsOpen: \" + modalIsOpen)\r\n        }\r\n    );\r\n\r\n    // change state of modalIsOpen to false\r\n    function closeModal() {\r\n        setIsOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/\">Home</Link>\r\n                        {/* <a href=\"/\">Home</a> */}\r\n                    </li>\r\n                    <li>\r\n                        {/* set state to true to open the loginModal */}\r\n                        {/* check if best practice is to use <button> vs <a> */}\r\n                        {/* <a href=\"#\"  onClick={() => setIsOpen(true)}>login</a> */}\r\n                        <Link to=\"#\" onClick={() => setIsOpen(true)}>Login</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/test-page\">Test Page</Link>\r\n                    </li>\r\n                </ul>\r\n                {/* pass through the state of the modal to LoginModal */}\r\n                {/* pass through the closeModal function in order use close button within LoginModal */}\r\n                <LoginModal\r\n                    isOpen={modalIsOpen}\r\n                    closeModal={closeModal}\r\n                />\r\n            </nav>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport profilePicture from \"../../img/profilePicture.jpg\";\r\n\r\nconst Home = () => {\r\n    return(\r\n        <div>\r\n            <h1>New Mern Practice</h1>\r\n            <h2>Author: Shayla Stevenson</h2>\r\n            <img src={profilePicture} alt=\"Shayla Stevenson\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nconst TestPage = () => {\r\n    return(\r\n        <div>\r\n            <h1>This is the test page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestPage","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation\";\nimport Home from \"./pages/Home\"\nimport \"./App.css\";\nimport TestPage from \"./pages/TestPage\";\n\nconst App = () => {\n  \n    return (\n      <div className=\"App\">\n        {/* <Router> */}\n          <div>\n            <Navigation />\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n              <Route exact path=\"/test-page\">\n                <TestPage />\n              </Route>\n            </Switch>\n          </div>\n        {/* </Router> */}\n      </div>\n    );\n}\n\nexport default App","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { HashRouter, BrowserRouter } from \"react-router-dom\";\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\nReactDOM.render(\n    // <React.StrictMode>\n      <HashRouter\n      basename=\"/new-mern-practice\">\n        <App />\n      </HashRouter>,\n    // </React.StrictMode>,\n    document.getElementById('root')\n  );\n  registerServiceWorker();"],"sourceRoot":""}